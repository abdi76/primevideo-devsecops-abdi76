pipeline {
  agent any

  environment {
    SONARQUBE = 'SonarQube'
    DOCKER_IMAGE = 'abdi76/primevideo-app:latest'
    SCANNER_HOME = tool 'sonar-scanner'
  }

  tools {
    nodejs 'node18'
    jdk 'jdk-17'
  }

  stages {
    stage('📥 Clone Code from GitHub') {
      steps {
        git branch: 'master',
            credentialsId: 'github-token',
            url: 'https://github.com/abdi76/primevideo-devsecops-abdi76.git'
      }
    }

    stage('🔍 SonarQube Code Analysis') {
      environment {
        PATH = "${SCANNER_HOME}/bin:${env.PATH}"
      }
      steps {
        withSonarQubeEnv("${SONARQUBE}") {
          sh 'sonar-scanner -Dsonar.projectKey=prime-video -Dsonar.sources=.'
        }
      }
    }

    stage('🐳 Build Docker Image') {
      steps {
        sh 'docker build -t $DOCKER_IMAGE .'
      }
    }

    stage('🛡️ Trivy Image Scan') {
      steps {
        sh 'trivy image $DOCKER_IMAGE || true'
      }
    }

    stage('📤 Push Image to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          sh 'docker push $DOCKER_IMAGE'
        }
      }
    }

    stage('🚀 Trigger CD Pipeline') {
      steps {
        script {
          try {
            echo "🔁 Trying to trigger CD pipeline 'primevideo-cd'..."
            build job: 'primevideo-cd', wait: false
            echo "✅ CD pipeline triggered successfully."
          } catch (err) {
            echo "⚠️ CD pipeline 'primevideo-cd' not found or not configured yet."
            echo "ℹ️ CI pipeline completed. Once CD is created, this stage will trigger it automatically."
          }
        }
      }
    }
  }

  post {
    success {
      echo '✅ CI pipeline completed successfully.'
    }
    failure {
      echo '❌ CI pipeline failed. Check console output for more details.'
    }
  }
}
